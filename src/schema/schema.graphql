type Query {
  "fetch list of all users"
  users: [User!]!

  "fetch list of all posts"
  posts(cursor: CursorInput): PostsPayload!

  "fetch list of all posts author by logged in user"
  myPosts: [Post!]!

  "fetch current user"
  tags: [Tag!]!

  "fetch information about logged in user"
  me: User!
}

type Mutation {
  "Register new user using `username` and `password`"
  signup(username: String!, password: String!): Auth!

  "Authenticate user to generate login token"
  login(username: String!, password: String!): Auth!

  "creates new post using `CreatePostInput`"
  createPost(data: CreatePostInput!): Post!

  "deletes existing post"
  deletePost(id: ID!): Post!

  "updates existing post"
  updatePost(id: ID!, data: UpdatePostInput!): Post!

  "creates new tag using `CreatePostInput`"
  createTag(data: CreateTagInput!): Tag!

  "deletes existing tag"
  deleteTag(id: ID!): Tag!

  "follow a tag"
  followTag(tagId: ID!): User

  "unfollow a tag"
  unFollowTag(tagId: ID!): User

  "follow an author"
  followAuthor(userId: ID!): User

  "unfollow an author"
  unFollowAuthor(userId: ID!): User
}

input CursorInput {
  limit: Int
  page: Int

}

input CreateTagInput {
  name: String!
}

input CreatePostInput {
  title: String!
  body: String!
  type: PostType
  tags: [ID!]
}

input UpdatePostInput {
  title: String
  body: String
}

enum PostType {
  guestUserA
  guestUserB
  user
}

type PostsPayload {
  posts: [Post!]
  cursor: CursorPayload
}

type CursorPayload {
  hasNext: Boolean!
  totalCount: Int!
}

type Tag {
  _id: ID!
  name: String!
}

type User {
  _id: ID!
  username: String!
  tags: [Tag]
  authors: [User]
}

type Auth {
  _id: ID!
  username: String!
  token: String!
}

type Post {
  _id: ID!
  title: String!
  body: String!
  author: User
  createdAt: String!
  type: String!
  tags: [Tag]
}
